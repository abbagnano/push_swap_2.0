#include "libswap.h"

int		ft_strlen(char *str)
{
	int x;

	x = 0;
	while (str[x])
		x++;
	return (x);
}

void	ft_write(char *str)
{
	write(1, str, ft_strlen(str));
	return ;
}

void	ft_exit(char *str, t_data *data)
{
	ft_write(str);
	free(*data->stack_a);
//	free(*data->stack_a->next);
//	free(*data->stack_b);
	free(data->stack_a);
//	free(data->stack_b);
//	free(data);
}

int		ft_atoi(char *str, t_data *data)
{
	int	tot;
	int	neg;

	tot = 0;
	neg = 0;
	if (*str == '-' && *str++)
		neg++;
	if (*str < '0' || *str > '9')
		ft_exit("Error", data);
	while (*str > '0' && *str < '9')
		tot = tot * 10 + *str++ - 48;
	if (neg)
		tot *= -1;
//	printf("tot: %d\n", tot);
	return (tot);
}

void	ft_print_double(t_list **stack)
{
	printf("print_double\n");
	while ((*stack)->next != NULL)
	{
		printf("stack[] = %d\n", (*stack)->num);
		if (!((*stack)->next) && printf("..\n"))
			break ;
		printf("@@\n");
		*stack = (*stack)->next;
	}
	printf("@@aaaaaa\n");
}

void	ft_print_list(t_list *stack, t_data *data)
{
	printf("print_list\n");
	while (data->ac--)//(stack->next)
	{
		printf("stack[] = %d\n", stack->num);
		if (!(stack->next) && printf("..\n"))
			break ;
		printf("@@\n");
		stack = (*stack).next;
	}
	printf("@@aaaaaa\n");
}

void	ft_init_list(t_list *stack, char **av, t_data *data)
{	printf("init_list\n");
	int	x;

	x = 1;
//	stack = (t_list *)malloc(sizeof(t_list) * 1);
	while (x < data->ac)
	{
		stack = (t_list *)malloc(sizeof(t_list) * 1);
		stack->num = ft_atoi(av[x], data);
		printf("stack[%d] = %d\n", x, stack->num);
		if (x == data->ac -1 && printf("@@\n"))
			break ;
	//	stack->next = (t_list *)malloc(sizeof(t_list) * 1);
		stack = stack->next;
		x++;
	}
	stack->next = NULL;
}



void	ft_init_list_double(t_list **stack, char **av, t_data *data)
{	printf("init_list_double\n");
	int	x;

	x = 1;
	*stack = (t_list *)malloc(sizeof(t_list) * 1);
	while (x < data->ac)
	{
		(*stack)->num = ft_atoi(av[x], data);
		printf("stack[%d] = %d\n", x, (*stack)->num);
		if (x == data->ac -1 && printf("@@\n"))
			break ;
		(*stack)->next = (t_list *)malloc(sizeof(t_list) * 1);
		*stack = (*stack)->next;
		x++;
	}
	(*stack)->next = NULL;
}



int main(int ac, char **av)
{
//	printf("ac= %d\n", ac);
//	t_list  **stack_a;
//	t_list  **stack_b;
	t_data	data;

	data.ac = ac;
	if (ac < 2)
	{
		ft_write("Error: invalid args!\n");
		return (0);
	}
	data.stack_a = (t_list **)malloc(sizeof(t_list *) * 1);
//	data.stack_b = (t_list **)malloc(sizeof(t_list *) * 1);
//
	ft_init_list(*data.stack_a, av, &data);
//	ft_init_list_double(data.stack_a, av, &data);
//	ft_print_double(data.stack_a);
	ft_print_list(*data.stack_a, &data);
	
	/*
	while (ac-- > 0)
	{
		ft_init_stack(stack_a, av[ac]);
		ft_init_stack(stack_b);
	}
	
	ft_get_int(stack_a, av, ac);
	ft_print_stack(stack_a, ac);

	*/
//	ft_print_stack(*data.stack_a, ac);	

	ft_exit("", &data);
		char buf[10];
	read(0, &buf, 9);
}